/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as UsersNewImport } from './routes/users/new'
import { Route as UsersUserIdImport } from './routes/users/$userId'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)

const UsersNewRoute = UsersNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => UsersRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersImport
    }
    '/users/new': {
      id: '/users/new'
      path: '/new'
      fullPath: '/users/new'
      preLoaderRoute: typeof UsersNewImport
      parentRoute: typeof UsersImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersImport
    }
  }
}

// Create and export the route tree

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersNewRoute: typeof UsersNewRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersNewRoute: UsersNewRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users': typeof UsersRouteWithChildren
  '/users/$userId': typeof UsersUserIdRoute
  '/users/new': typeof UsersNewRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/new': typeof UsersNewRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/users': typeof UsersRouteWithChildren
  '/users/$userId': typeof UsersUserIdRoute
  '/users/new': typeof UsersNewRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/users' | '/users/$userId' | '/users/new' | '/users/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/users/$userId' | '/users/new' | '/users'
  id: '__root__' | '/' | '/users' | '/users/$userId' | '/users/new' | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsersRoute: typeof UsersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersRoute: UsersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/users"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/$userId",
        "/users/new",
        "/users/"
      ]
    },
    "/users/$userId": {
      "filePath": "users/$userId.tsx",
      "parent": "/users"
    },
    "/users/new": {
      "filePath": "users/new.tsx",
      "parent": "/users"
    },
    "/users/": {
      "filePath": "users/index.tsx",
      "parent": "/users"
    }
  }
}
ROUTE_MANIFEST_END */
