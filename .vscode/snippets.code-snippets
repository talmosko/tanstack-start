{
	"New User Form Component": {
	  "scope": "typescript,typescriptreact",
	  "prefix": "newUserRoute",
	  "body": [
		"import { createFileRoute, useRouter } from '@tanstack/react-router'",
		"import { createServerFn } from '@tanstack/start'",
		"import { createUser, userSchema } from '@utils/db'",
		"",
		"const createUserServerFn = createServerFn({ method: 'POST' })",
		"  .validator(userSchema)",
		"  .handler(async ({ data }) => {",
		"    await createUser(data);",
		"  });",
		"",
		"export const Route = createFileRoute('${1:/users/new}')({",
		"  component: RouteComponent,",
		"});",
		"",
		"function RouteComponent() {",
		"  const router = useRouter();",
		"  const createUserAction = async (formData: FormData) => {",
		"    const name = formData.get('name');",
		"    const email = formData.get('email');",
		"    const username = formData.get('username');",
		"",
		"    await createUserServerFn({",
		"      data: {",
		"        name: name as string,",
		"        email: email as string,",
		"        username: username as string,",
		"      },",
		"    });",
		"",
		"    await router.invalidate();",
		"    router.navigate({ to: '/users' });",
		"  };",
		"",
		"  return (",
		"    <form className=\"flex flex-col gap-2\" action={createUserAction}>",
		"      <h1>${2:Create User}</h1>",
		"      <label htmlFor=\"name\">Name</label>",
		"      <input type=\"text\" name=\"name\" />",
		"      <label htmlFor=\"email\">Email</label>",
		"      <input type=\"email\" name=\"email\" />",
		"      <label htmlFor=\"username\">Username</label>",
		"      <input type=\"text\" name=\"username\" />",
		"      <button type=\"submit\">${3:Create User}</button>",
		"    </form>",
		"  );",
		"}"
	  ],
	  "description": "Creates a new user form component with TanStack Router and Server Functions"
	},

	"Users Layout Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "usersLayoutComponent",
    "body": [
      "function RouteComponent() {",
      "  const users = Route.useLoaderData();",
      "  return (",
      "    <>",
      "      <h1>Users</h1>",
      "      <div className=\"flex gap-10\">",
      "        <div className=\"w-64\">",
      "          <ul className=\"space-y-2\">",
      "            {users.users.map((user) => (",
      "              <li key={user.id}>",
      "                <Link",
      "                  to=\"/users/\\$userId\"",
      "                  params={{ userId: user.id.toString() }}",
      "                  className=\"hover:underline\"",
      "                >",
      "                  {user.name}",
      "                </Link>",
      "              </li>",
      "            ))}",
      "          </ul>",
      "        </div>",
      "        {/* <Outlet /> */}",
      "      </div>",
      "    </>",
      "  );",
      "}"
    ],
    "description": "Creates a users layout component with a sidebar list and outlet for nested routes"
  },

  "User ID Double Deferred Route": {
    "scope": "typescript,typescriptreact",
    "prefix": "userIdMixedRoute",
    "body": [
      "import { Await, createFileRoute, useRouter } from '@tanstack/react-router'",
      "import { Suspense, useState } from 'react'",
      "import { useSuspenseQuery } from '@tanstack/react-query'",
      "import {",
      "  fetchUserDeferred,",
      "  getUserDeferredQueryOptions,",
      "  getUserQueryOptions,",
      "} from '@/utils/query'",
      "",
      "export const Route = createFileRoute('/users/\\$userId')({",
      "  component: RouteComponent,",
      "  loader: async ({ params, context }) => {",
      "    const userDeferredPromise = fetchUserDeferred(Number(params.userId));",
      "    return { userDeferredPromise };",
      "  },",
      "});",
      "",
      "function RouteComponent() {",
      "  const params = Route.useParams();",
      "  const router = useRouter();",
      "  const user = useSuspenseQuery(getUserQueryOptions(Number(params.userId)));",
      "",
      "  const { userDeferredPromise } = Route.useLoaderData();",
      "  const [counter, setCounter] = useState(0);",
      "",
      "  return (",
      "    <div className=\"flex flex-col\">",
      "      <h2>{user.data.email}</h2>",
      "      <p>{user.data.email}</p>",
      "",
      "      <Suspense fallback={<div>Loading...</div>}>",
      "        <Await promise={userDeferredPromise}>",
      "          {(data) => (",
      "            <div>",
      "              <p>{new Date(data.date).toLocaleTimeString()}</p>",
      "            </div>",
      "          )}",
      "        </Await>",
      "      </Suspense>",
      "",
      "      <button onClick={() => setCounter(counter + 1)}>",
      "        counter : {counter}",
      "      </button>",
      "      <button onClick={() => router.invalidate()}>invalidate</button>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Creates a user route component with both immediate and deferred data loading using TanStack Router and React Query"
  },

  "userIdImportantRoute": {
    "scope": "typescript,typescriptreact",
    "prefix": "userIdImportantRoute",
    "body": [
      "import { createFileRoute } from '@tanstack/react-router'",
      "import { getUserDeferredQueryOptions } from '@/utils/query'",
      "",
      "export const Route = createFileRoute('/users/\\$userId')({",
      "  component: RouteComponent,",
      "  loader: async ({ params, context }) => {",
      "    const user = await context.queryClient.ensureQueryData(",
      "      getUserDeferredQueryOptions(Number(params.userId))",
      "    );",
      "    return { user };",
      "  },",
      "});"
    ],
    "description": "Creates a user route with ensureQueryData using TanStack Router and React Query"
  },

  "userIdImportantComponent": {
    "scope": "typescript,typescriptreact",
    "prefix": "userIdImportantComponent",
    "body": [
      "function RouteComponent() {",
      "  const params = Route.useParams();",
      "  const router = useRouter();",
      "  const { user } = Route.useLoaderData();",
      "",
      "  const [counter, setCounter] = useState(0);",
      "  return (",
      "    <>",
      "      <div className=\"flex flex-col\">",
      "        <h2>{user.email}</h2>",
      "        <p>{new Date(user.date).toLocaleTimeString()}</p>",
      "",
      "        <p>{counter}</p>",
      "        <button onClick={() => setCounter(counter + 1)}>+1</button>",
      "        <button onClick={() => router.invalidate()}>invalidate</button>",
      "      </div>",
      "    </>",
      "  );",
      "}"
    ],
    "description": "Creates a user component that displays user information and includes counter functionality"
  }
}